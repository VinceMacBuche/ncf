#!/usr/bin/python3

# This will become the main command line tool for ncf

import os
import sys
import shutil
import traceback
import json

DEFAULT_NCF_DIR = '/usr/share/ncf'

NCF_DIR = os.path.dirname(os.path.realpath(__file__))
NCF_TREE_DIR  = os.path.join(NCF_DIR, 'tree')
NCF_TOOLS_DIR = os.path.join(NCF_DIR, 'tools')

sys.path[0:0] = [NCF_TOOLS_DIR, DEFAULT_NCF_DIR]

import ncf

def get_ncf_dir():
  # Try the directory this script is run from first (in case of a git clone)
  # Otherwise use the system default path
  target_dirs = [ NCF_TREE_DIR, os.path.join(DEFAULT_NCF_DIR, 'tree') ]
  for dir in target_dirs:
    if os.path.isdir(dir):
      return dir

  # If none found, return None
  return None

def init(args):

  # First argument is dir name, unless not specified then we use current dir
  if len(args) == 0:
    init_dir = os.getcwd()
    print("INFO: No path specified, using current directory")
  else:
    init_dir = args[0]

  print("INFO: Initialising in " + init_dir)

  # Check if this directory is already a ncf instance
  if os.path.isdir(init_dir) and set(ncf.dirs).intersection(set(os.listdir(init_dir))):
    print("ERROR: It looks like this directory is already initialized. Aborting")
    exit(2)

  for component_dir in ncf.dirs:
    target_dir = os.path.join(init_dir, component_dir)
    os.makedirs(target_dir)
    shutil.copy(os.path.join(get_ncf_dir(), component_dir, "README.md"), target_dir)

  print("INFO: Success")

def write_techniques(root_path, opt_bundle_name):
  alt_path = root_path
  if alt_path is None:
    alt_path = ""
  techniques = ncf.get_all_techniques_metadata(alt_path=alt_path)['data']['techniques']
  if opt_bundle_name is not None:
    if techniques[opt_bundle_name] is not None:
      techniques = { opt_bundle_name : techniques[opt_bundle_name] }
    else:
      sys.stderr.write("Error: Unable to write Technique files related to Technique '"+opt_bundle_name+"', skipping... (Technique '"+opt_bundle_name+"' does not exist)\n")
      exit(1)

  ret = 0
  for technique, metadata in techniques.items():
    try:
      ncf.write_technique(metadata, alt_path)
    except Exception as e:
      sys.stderr.write("Error: Unable to write Technique files related to Technique "+technique+", skipping... (" + str(e) + ")\n")
      sys.stderr.write(traceback.format_exc())
      ret = 1
      continue
  exit(ret)

def usage():
  sys.stderr.write("Can't parse parameters\n")
  print("Usage: ncf <command> [arguments]")
  print("Available commands:")
  print(" - init <ncf_path>")
  print(" - write_technique <ncf_path> <bundle_name>")
  print(" - write_all_techniques <ncf_path>")


if __name__ == '__main__':

  if len(sys.argv) <= 1:
    usage()
    exit(1)

  if sys.argv[1] == "init":
    init(sys.argv[2:])
  elif sys.argv[1] == "write_all_techniques":
    write_techniques(sys.argv[2], None)
  elif sys.argv[1] == "write_technique":
    write_techniques(sys.argv[2],sys.argv[3])
  elif sys.argv[1] == "get_all_techniques":
     print(json.dumps(ncf.get_all_techniques_metadata(True, "/var/rudder/configuration-repository/ncf")['data']['techniques']))
  elif sys.argv[1] == "get_technique":
     print(json.dumps(ncf.get_all_techniques_metadata(True, "/var/rudder/configuration-repository/ncf")['data']['techniques'][sys.argv[2]]))
  elif sys.argv[1] == "get_all_methods":
     print(json.dumps(ncf.get_all_generic_methods_metadata("/var/rudder/configuration-repository/ncf")["data"]["generic_methods"]))
  elif sys.argv[1] == "get_method":
     print(json.dumps(ncf.get_all_generic_methods_metadata("/var/rudder/configuration-repository/ncf")["data"]["generic_methods"][sys.argv[2]]))


  else:
    usage()
    exit(1)


